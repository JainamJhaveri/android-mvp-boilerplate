// for fabric
buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.25.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'


def readVersion() {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
        print ignore
    } finally {
        if (stream != null) stream.close()
    }

    //safety defaults in case file is missing
    if (!version['major']) version['major'] = "1"
    if (!version['minor']) version['minor'] = "0"
    if (!version['build']) version['build'] = "0"
    return version
}

def readVersionName() {
    def version = readVersion()
    return "${version['major']}.${version['minor']}.${version['build']}"
}

def readBuildCode() {
    def version = readVersion()
    def build = version['build'] as int
    return build
}

def incrementBuildNumber() {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = readVersion()

    def build = version['build'] as int
    build++
    version['build'] = build.toString()

    def stream = new FileOutputStream(versionFile)
    try {
        println "store started"
        version.store(stream, null)
        println "store successful"
    } finally {
        stream.close()
    }

    print "Build number is now... " + build

    return build
}

def incrementVersionNumber(def type = "minor") {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = readVersion()

    def major = version['major'] as int
    def minor = version['minor'] as int

    if (type == 'major') {
        major++
        minor = 0
    } else if (type == 'minor') {
        minor++
    }

    version['major'] = major.toString()
    version['minor'] = minor.toString()

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }

    println "Version is now... " + major + "." + minor

    return major + "." + minor
}

android {

    def rootProject = rootProject.ext
    compileSdkVersion rootProject.compileSdkV
    defaultConfig {
        applicationId rootProject.applicationId
        minSdkVersion rootProject.minSdkV
        targetSdkVersion rootProject.targetSdkV
        testInstrumentationRunner rootProject.testInstrumentationRunner
        vectorDrawables.useSupportLibrary = true
        versionName readVersionName()
        versionCode readBuildCode()
        multiDexEnabled true
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_BASE_URL", "\"https://api.github.com/\""
        }
        release {
            minifyEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_BASE_URL", "\"https://api.github.com/\""
            debuggable false
            jniDebuggable false
//            signingConfig signingConfigs.releaseConfig
            renderscriptDebuggable false
            zipAlignEnabled true
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    buildToolsVersion rootProject.buildToolsV
}

// for fabric
repositories {
    flatDir { dirs 'libs' }
    maven { url 'https://maven.fabric.io/public' }
    maven {
        url 'https://maven.google.com/'
        name 'Google'
    }
    mavenCentral()
}

// Required for annotation processing plugins like Dagger
kapt {
    generateStubs = true
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinV"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinV"

    // support library
    implementation "com.android.support:appcompat-v7:$supportLibV"
    implementation "com.android.support:design:$supportLibV"
    implementation "com.android.support:support-v4:$supportLibV"
    implementation "com.android.support:cardview-v7:$supportLibV"
    implementation "com.android.support:multidex:$multidexV"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitV"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitV"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitV"

    // gson
    implementation "com.google.code.gson:gson:$gsonV"

    // rx
    implementation "io.reactivex.rxjava2:rxjava:$rxV"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidV"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlinV"

    // okHttp
    implementation "com.squareup.okhttp3:okhttp:$okhttpV"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpV"

    // timber
    implementation "com.jakewharton.timber:timber:$timberV"

    // stetho
    implementation "com.facebook.stetho:stetho:$stethoV"
    implementation "com.facebook.stetho:stetho-okhttp3:$stethoV"

    // anko
    implementation "org.jetbrains.anko:anko:$ankoV"
    implementation "org.jetbrains.anko:anko-commons:$ankoV"
    implementation "org.jetbrains.anko:anko-design:$ankoV"

    // image loader
    implementation "com.github.bumptech.glide:glide:$glideV"
    kapt "com.github.bumptech.glide:compiler:$glideV"

    // dagger
    implementation 'org.glassfish:javax.annotation:10.0-b28'
    implementation "com.google.dagger:dagger:$daggerV"
    kapt "com.google.dagger:dagger-compiler:$daggerV"

    // remember
    implementation 'com.tumblr:remember:1.0.0@aar'

    // Room dependencies
    implementation "android.arch.persistence.room:runtime:$roomV"
    kapt "android.arch.persistence.room:compiler:$roomV"

    // Live Data
    implementation "android.arch.lifecycle:livedata:$liveDataV"
    kapt "android.arch.lifecycle:compiler:$liveDataV"

    //Eventbus
    implementation 'org.greenrobot:eventbus:3.0.0'

    // mvp
    implementation "com.hannesdorfmann.mosby3:mvp:$mosbyV"

    //permission dispatcher
    implementation("com.github.hotchemi:permissionsdispatcher:${permissionDispatcherV}") {
        exclude module: "support-v13"
    }
    kapt "com.github.hotchemi:permissionsdispatcher-processor:${permissionDispatcherV}"

    //joda-time
    implementation 'net.danlew:android.joda:2.9.9.2'

    //firebase auth
    implementation "com.google.firebase:firebase-auth:$firebaseAuthV"
    implementation "com.google.firebase:firebase-messaging:$firebaseMessagingV"

    // crashlytics
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.3@aar') {
        transitive = true
    }

    // google play services gms
    implementation "com.google.android.gms:play-services-vision:$gmsVersion"

    // testing libraries
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task doMajorVersionIncrement << {
    println "Incrementing major version..."
    incrementVersionNumber('major')
}

task doMinorVersionIncrement << {
    println "Incrementing minor version..."
    incrementVersionNumber('minor')
}

task doBuildNumberIncrement << {
    println "Incrementing build number..."
    incrementBuildNumber()
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

apply plugin: 'com.google.gms.google-services'
